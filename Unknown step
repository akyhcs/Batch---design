Will Steps Also Be Marked as FAILED When a Job is Marked as FAILED?

No, marking the job as FAILED does not automatically mark the steps as FAILED. The job and step statuses are independent in Spring Batch.

If you need to explicitly mark the steps as FAILED when a job was previously in UNKNOWN state, you have to update each step execution status separately.


---

1. Updating Step Status When Job is Marked as FAILED

Modify the JobExecutionListener to update both job and step statuses.

Updated JobStatusValidatorListener

import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.explore.JobExplorer;
import org.springframework.stereotype.Component;
import java.util.List;

@Component
public class JobStatusValidatorListener implements JobExecutionListener {

    private final JobExplorer jobExplorer;

    public JobStatusValidatorListener(JobExplorer jobExplorer) {
        this.jobExplorer = jobExplorer;
    }

    @Override
    public void beforeJob(JobExecution jobExecution) {
        String jobName = jobExecution.getJobInstance().getJobName();

        // Fetch previous job executions
        List<JobExecution> jobExecutions = jobExplorer.getJobExecutions(jobExecution.getJobInstance());

        for (JobExecution previousExecution : jobExecutions) {
            if (previousExecution.getStatus() == BatchStatus.UNKNOWN) {
                System.out.println("‚ùå Found previous job in UNKNOWN status. Marking it as FAILED.");

                // Mark Job as FAILED
                previousExecution.setStatus(BatchStatus.FAILED);
                previousExecution.setExitStatus(previousExecution.getExitStatus()
                        .addExitDescription("Marked as FAILED due to UNKNOWN status."));

                // Mark all associated steps as FAILED
                for (StepExecution stepExecution : previousExecution.getStepExecutions()) {
                    if (stepExecution.getStatus() == BatchStatus.UNKNOWN) {
                        System.out.println("‚ùå Marking step '" + stepExecution.getStepName() + "' as FAILED.");
                        stepExecution.setStatus(BatchStatus.FAILED);
                        stepExecution.setExitStatus(stepExecution.getExitStatus()
                                .addExitDescription("Step failed due to UNKNOWN job status."));
                    }
                }
            }
        }
    }

    @Override
    public void afterJob(JobExecution jobExecution) {
        System.out.println("‚úÖ Job Completed. Final Status: " + jobExecution.getStatus());
    }
}

‚úÖ Marks UNKNOWN jobs as FAILED before execution.
‚úÖ Marks all UNKNOWN steps as FAILED before execution.


---

2. Attaching Listener to Job Configuration

Modify the job configuration to attach the job status validator listener.

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class BatchJobConfig {

    private final JobBuilderFactory jobBuilderFactory;
    private final StepBuilderFactory stepBuilderFactory;
    private final Step stepOne;
    private final JobStatusValidatorListener jobStatusValidatorListener;

    public BatchJobConfig(JobBuilderFactory jobBuilderFactory, StepBuilderFactory stepBuilderFactory,
                          Step stepOne, JobStatusValidatorListener jobStatusValidatorListener) {
        this.jobBuilderFactory = jobBuilderFactory;
        this.stepBuilderFactory = stepBuilderFactory;
        this.stepOne = stepOne;
        this.jobStatusValidatorListener = jobStatusValidatorListener;
    }

    @Bean
    public Job singleInstanceJob() {
        return jobBuilderFactory.get("singleInstanceJob")
                .listener(jobStatusValidatorListener) // Attach listener
                .start(stepOne)
                .build();
    }
}

‚úÖ Ensures that jobs and steps with UNKNOWN status are marked FAILED before execution.
‚úÖ Prevents old stuck executions from blocking new job runs.


---

3. Expected Console Output

If a previous job was left in UNKNOWN state:

‚ùå Found previous job in UNKNOWN status. Marking it as FAILED.
‚ùå Marking step 'stepOne' as FAILED.
‚úÖ Job Completed. Final Status: COMPLETED

If no previous job had UNKNOWN status:

‚úÖ Job Completed. Final Status: COMPLETED


---

4. Summary

‚úÖ Ensures both job and steps are properly marked as FAILED before executing a new job.

Would you like an email alert when a job/step is marked as FAILED? üöÄ

