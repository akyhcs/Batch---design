import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.CommandLineRunner;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import java.sql.Connection;

@Component
public class DataSourceDebugger implements CommandLineRunner {

    private final DataSource defaultDataSource;
    private final DataSource customDataSource;

    public DataSourceDebugger(
        @Qualifier("defaultDataSource") DataSource defaultDataSource,
        @Qualifier("customDataSource") DataSource customDataSource) {
        this.defaultDataSource = defaultDataSource;
        this.customDataSource = customDataSource;
    }

    @Override
    public void run(String... args) throws Exception {
        System.out.println("ðŸ”¹ Default DataSource: " + defaultDataSource);
        System.out.println("ðŸ”¹ Custom DataSource: " + customDataSource);

        try (Connection conn1 = defaultDataSource.getConnection();
             Connection conn2 = customDataSource.getConnection()) {

            System.out.println("âœ… Default DataSource - AutoCommit: " + conn1.getAutoCommit());
            System.out.println("âœ… Custom DataSource - AutoCommit: " + conn2.getAutoCommit());

            System.out.println("âœ… Default DataSource - Schema: " + conn1.getSchema());
            System.out.println("âœ… Custom DataSource - Schema: " + conn2.getSchema());

            System.out.println("âœ… Default DataSource - Isolation: " + conn1.getTransactionIsolation());
            System.out.println("âœ… Custom DataSource - Isolation: " + conn2.getTransactionIsolation());
        }
    }
}
