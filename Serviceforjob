Here's how you can implement a service interface to handle triggering multiple jobs dynamically in Spring Boot:


---

Step 1: Create the Service Interface

Define an interface with an abstract method to trigger jobs. The method will accept the job name and parameters dynamically.

import org.springframework.batch.core.JobParameters;

public interface JobService {
    void triggerJob(String jobName, JobParameters jobParameters) throws Exception;
}


---

Step 2: Implement the Service Interface

Create a concrete implementation of the JobService interface. Use JobLauncher and a Map to register multiple jobs by name.

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.batch.core.launch.JobExecutionAlreadyRunningException;
import org.springframework.batch.core.launch.JobInstanceAlreadyCompleteException;
import org.springframework.batch.core.launch.JobParametersInvalidException;
import org.springframework.batch.core.repository.JobRestartException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Map;

@Service
public class JobServiceImpl implements JobService {

    @Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private Map<String, Job> jobRegistry; // Inject all jobs as a map

    @Override
    public void triggerJob(String jobName, JobParameters jobParameters) throws Exception {
        Job job = jobRegistry.get(jobName);
        if (job == null) {
            throw new IllegalArgumentException("No job found with name: " + jobName);
        }
        try {
            jobLauncher.run(job, jobParameters);
        } catch (JobExecutionAlreadyRunningException | JobRestartException |
                 JobInstanceAlreadyCompleteException | JobParametersInvalidException e) {
            throw new Exception("Failed to execute job: " + e.getMessage(), e);
        }
    }
}


---

Step 3: Register Jobs in a Configuration Class

Use a @Configuration class to create a Map<String, Job> that maps job names to job beans.

import org.springframework.batch.core.Job;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.HashMap;
import java.util.Map;

@Configuration
public class JobRegistryConfig {

    @Bean
    public Map<String, Job> jobRegistry(Job job1, Job job2) {
        Map<String, Job> registry = new HashMap<>();
        registry.put("job1", job1);
        registry.put("job2", job2);
        return registry;
    }
}


---

Step 4: Create a Controller

The controller will accept the job name and parameters from the client and delegate to the JobService to trigger the job.

import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/jobs")
public class JobController {

    @Autowired
    private JobService jobService;

    @PostMapping("/invoke")
    public ResponseEntity<String> invokeJob(@RequestParam String jobName, @RequestParam Map<String, String> params) {
        try {
            JobParameters jobParameters = createJobParameters(params);
            jobService.triggerJob(jobName, jobParameters);
            return ResponseEntity.ok("Job " + jobName + " invoked successfully!");
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Failed to invoke job: " + e.getMessage());
        }
    }

    private JobParameters createJobParameters(Map<String, String> params) {
        JobParametersBuilder builder = new JobParametersBuilder();
        params.forEach(builder::addString);
        builder.addLong("timestamp", System.currentTimeMillis());
        return builder.toJobParameters();
    }
}


---

Step 5: Define Multiple Jobs

Define multiple job beans in your configuration.

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class BatchConfig {

    @Bean
    public Job job1(JobBuilderFactory jobBuilderFactory, Step step1) {
        return jobBuilderFactory.get("job1")
                .start(step1)
                .build();
    }

    @Bean
    public Job job2(JobBuilderFactory jobBuilderFactory, Step step2) {
        return jobBuilderFactory.get("job2")
                .start(step2)
                .build();
    }

    @Bean
    public Step step1(StepBuilderFactory stepBuilderFactory) {
        return stepBuilderFactory.get("step1")
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("Executing Step 1...");
                    return RepeatStatus.FINISHED;
                })
                .build();
    }

    @Bean
    public Step step2(StepBuilderFactory stepBuilderFactory) {
        return stepBuilderFactory.get("step2")
                .tasklet((contribution, chunkContext) -> {
                    System.out.println("Executing Step 2...");
                    return RepeatStatus.FINISHED;
                })
                .build();
    }
}


---

Example Request

cURL Command

curl -X POST "http://localhost:8080/jobs/invoke?jobName=job1&param1=value1&param2=value2"

Expected Output

Success:

Job job1 invoked successfully!

Failure:

Failed to invoke job: No job found with name: job3



---

Key Features

1. Dynamic Job Invocation:

Allows multiple jobs to be triggered dynamically by passing the job name.



2. Job Registry:

A centralized map to manage all jobs.



3. Error Handling:

Handles various job-related exceptions gracefully.




Let me know if you need any additional clarification or enhancements!

