
The TaskExecutorJobLauncher has been deprecated and replaced with DefaultJobLauncher in Spring Batch 5.1.2. However, if you want to explicitly use TaskExecutorJobLauncher, you can re-enable it by defining the required class in your configuration.

Hereâ€™s how you can configure and use it:


---

1. Defining TaskExecutorJobLauncher

Since TaskExecutorJobLauncher is not available out-of-the-box in newer Spring Batch versions, you can extend the SimpleJobLauncher class to recreate the TaskExecutorJobLauncher behavior.

Custom Implementation of TaskExecutorJobLauncher:

import org.springframework.batch.core.launch.support.SimpleJobLauncher;
import org.springframework.core.task.TaskExecutor;

public class TaskExecutorJobLauncher extends SimpleJobLauncher {

    private TaskExecutor taskExecutor;

    public void setTaskExecutor(TaskExecutor taskExecutor) {
        this.taskExecutor = taskExecutor;
        super.setTaskExecutor(taskExecutor);
    }

    public TaskExecutor getTaskExecutor() {
        return this.taskExecutor;
    }
}


---

2. Configure TaskExecutorJobLauncher

Now, use the custom TaskExecutorJobLauncher in your configuration with a TaskExecutor bean.

import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.task.TaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@Configuration
public class BatchConfig {

    @Bean
    public JobLauncher taskExecutorJobLauncher(JobRepository jobRepository, TaskExecutor taskExecutor) {
        TaskExecutorJobLauncher jobLauncher = new TaskExecutorJobLauncher();
        jobLauncher.setJobRepository(jobRepository);
        jobLauncher.setTaskExecutor(taskExecutor);
        return jobLauncher;
    }

    @Bean
    public TaskExecutor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(5);
        executor.setMaxPoolSize(10);
        executor.setQueueCapacity(25);
        executor.setThreadNamePrefix("BatchJob-");
        executor.initialize();
        return executor;
    }
}


---

3. Using TaskExecutorJobLauncher

You can now autowire the JobLauncher and use it to run jobs asynchronously.

Service Example

@Service
public class JobLaunchService {

    @Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private Job sampleJob;

    public String launchJob(Map<String, String> params) {
        JobParameters jobParameters = buildJobParameters(params);

        try {
            JobExecution jobExecution = jobLauncher.run(sampleJob, jobParameters);
            return "Job launched successfully with status: " + jobExecution.getStatus();
        } catch (Exception e) {
            return "Failed to launch job: " + e.getMessage();
        }
    }

    private JobParameters buildJobParameters(Map<String, String> params) {
        JobParametersBuilder builder = new JobParametersBuilder();

        // Add parameters dynamically
        params.forEach(builder::addString);

        // Add a timestamp to ensure uniqueness
        builder.addLong("timestamp", System.currentTimeMillis());

        return builder.toJobParameters();
    }
}


---

4. Controller Example

Expose an endpoint to trigger the job.

@RestController
@RequestMapping("/jobs")
public class JobController {

    @Autowired
    private JobLaunchService jobLaunchService;

    @PostMapping("/launch")
    public ResponseEntity<String> launchJob(@RequestParam Map<String, String> params) {
        String response = jobLaunchService.launchJob(params);
        if (response.startsWith("Failed")) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
        return ResponseEntity.ok(response);
    }
}


---

5. Testing the Configuration

Run the API

curl -X POST "http://localhost:8080/jobs/launch?param1=value1&param2=value2"

Expected Logs

The TaskExecutorJobLauncher will use the ThreadPoolTaskExecutor to run jobs asynchronously.

2023-12-30 12:00:00.000  INFO  --- [BatchJob-1] Executing step...
2023-12-30 12:00:00.500  INFO  --- [BatchJob-2] Executing step...


---

6. Alternatives

If you're working with Spring Batch 5.1.2:

Prefer using DefaultJobLauncher, as it provides the same functionality as TaskExecutorJobLauncher.

TaskExecutor can still be configured with DefaultJobLauncher.



---

Key Differences

Let me know if you need further clarification or assistance!


