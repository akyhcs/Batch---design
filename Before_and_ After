import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.annotation.BeforeStep;
import org.springframework.batch.core.annotation.AfterStep;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.stereotype.Component;

@Component
public class MyTasklet implements org.springframework.batch.core.step.tasklet.Tasklet {

    private StepExecution stepExecution;

    @BeforeStep
    public void beforeStep(StepExecution stepExecution) {
        this.stepExecution = stepExecution;
        System.out.println("[INFO] Starting Tasklet: " + stepExecution.getStepName());
        System.out.println("[INFO] Job Name: " + stepExecution.getJobExecution().getJobInstance().getJobName());
        System.out.println("[INFO] Job Parameters: " + stepExecution.getJobParameters());
        System.out.println("[INFO] Start Time: " + System.currentTimeMillis());
    }

    @Override
    public RepeatStatus execute(org.springframework.batch.core.scope.context.StepContribution contribution, ChunkContext chunkContext) throws Exception {
        // Your Tasklet logic here
        System.out.println("[INFO] Executing task logic...");
        Thread.sleep(2000); // Simulate task
        return RepeatStatus.FINISHED;
    }

    @AfterStep
    public void afterStep(StepExecution stepExecution) {
        System.out.println("[INFO] Completed Tasklet: " + stepExecution.getStepName());
        System.out.println("[INFO] Step Status: " + stepExecution.getStatus());
        System.out.println("[INFO] End Time: " + System.currentTimeMillis());
        System.out.println("[INFO] Updated Execution Context: " + stepExecution.getExecutionContext());
    }
}
